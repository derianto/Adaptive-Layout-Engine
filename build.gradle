buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'org.json:json:20090211'
    classpath 'org.linkedin:org.linkedin.gradle-plugins:1.5.0'
  }
}

apply plugin: 'idea'
apply plugin: 'org.linkedin.userConfig'
apply plugin: 'org.linkedin.spec'
apply plugin: 'java'

topBuildDir = "${rootDir}/build"
topDistDir = "${rootDir}/dist"

println("topBuildDir = $topBuildDir")
println("topDistDir = $topDistDir")

repositories {
  mavenCentral()
}

// Root level dependencies are used for constructing IDE files
dependencies {
  for(entry in spec.external) {
    println('entry = ' + entry)
    compile entry.value
  }
}

// Idea settings
idea {
  module {
    excludeDirs += file('./build')
    excludeDirs += file('./dist')
    excludeDirs += file('./.git')
    excludeDirs += file('./.gradle')

    file('./').eachDir { module ->
      if (!module.name.startsWith('.') &&
          !module.name.startsWith('build') &&
          !module.name.startsWith('dist') &&
          !module.name.startsWith('config'))
      {
        file(module).eachDir { folder ->
          if (folder.name.equals('java'))
          {
            sourceDirs += folder
          }
          else if (folder.name.equals('test'))
          {
            testSourceDirs += folder
          }
        }
      }
    }
  }
}

//Examples of how to iterate over all sub-projects; see gradle DSL for
//Project for details.

subprojects { subproj ->

  apply plugin: 'java'

  buildDir = "${topBuildDir}${project.path.replace(':','/')}".toString()

  sourceCompatibility = '1.6'
  targetCompatibility = '1.6'

  sourceSets {
    main {
      java {
        srcDir 'java'
      }
      resources {
        srcDir 'resources'
      }
    }
  }

  repositories {
    mavenCentral()
  }

  subproj.sourceCompatibility = JavaVersion.VERSION_1_6
}
